#include "imports/stdlib.fc";

;; ============================================
;; Minimal Storage
;; ============================================
(int) load_data() inline {
    slice ds = get_data().begin_parse();
    if (ds.slice_empty?()) {
        return 0;
    }
    return ds~load_uint(64);
}

() save_data(int value) impure inline {
    set_data(
        begin_cell()
            .store_uint(value, 64)
        .end_cell()
    );
}

;; ============================================
;; Minimal Getter
;; ============================================
int get_value() method_id {
    return load_data();
}

;; ============================================
;; Minimal Receiver
;; ============================================
() recv_internal(int my_balance, int msg_value, cell in_msg_full_cell, slice in_msg_full) impure {
    if (in_msg_full.slice_empty?()) {
        return ();
    }

    int flags = in_msg_full~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = in_msg_full~load_msg_addr();
    slice in_msg_slice = in_msg_full;
    int op = in_msg_slice~load_uint(32);

    if (op == 0x1) {
        int value_to_save = in_msg_slice~load_uint(64);
        save_data(value_to_save);

        ;; FIX: Explicitly accept the message to commit state changes.
        ;; This is the "save button" for the contract's storage.
        accept_message;

        ;; It's still good practice to send the remaining gas back.
        send_raw_message(
            begin_cell().store_uint(0x10, 6)
                        .store_slice(sender_address)
                        .store_coins(0)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .end_cell(),
            64
        );
    }
}

