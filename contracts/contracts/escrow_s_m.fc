;; ============================================
;; Ziver Escrow Smart Contract (escrow_s_m.fc)
;; MVP+ | Auto-Expiry | Event Logs | Security Enhancements | Replay Protection
;; ============================================

#include "imports/stdlib.fc";

;; --------------------------------------------
;; Error Codes
;; --------------------------------------------
const int error_not_owner = 100;
const int error_task_already_exists = 101;
const int error_task_not_found = 102;
const int error_not_task_poster = 103;
const int error_invalid_state = 104;
const int error_insufficient_funds = 105;
const int error_task_not_in_active_state = 106;
const int error_invalid_performer_address = 107;
const int error_performer_not_found = 108;
const int error_task_not_pending_verification = 109;
const int error_proof_already_submitted = 110;
const int error_not_performer_or_moderator = 111;
const int error_task_not_in_disputed_state = 112;
const int error_not_moderator = 113;
const int error_no_accumulated_fees = 114;
const int error_expired_task = 115;
const int error_task_not_set_and_funds_pending = 116;
const int error_task_not_in_active_or_pending = 117;
const int error_already_completed_performer = 118;
const int error_not_enough_performers_completed = 119;
const int error_unknown_opcode = 255;
const int error_task_expired = 256;
const int error_replay = 257; ;; Advanced security: replay protection

;; --------------------------------------------
;; Opcodes
;; --------------------------------------------
const int op_deploy = 0x61737467;
const int op_send_task_details = 0x1a2b3c4d;
const int op_deposit_funds = 0x5e6f7a8b;
const int op_verify_task_completion = 0x9c0d1e2f;
const int op_submit_proof = 0x3a4b5c6d;
const int op_raise_dispute = 0x7e8f9a0b;
const int op_resolve_dispute = 0x11223344;
const int op_withdraw_funds = 0x55667788;
const int op_cancel_task_and_refund = 0x99aabbcc;
const int op_withdraw_fee = 0xddccbbaa;
const int op_expire_task = 0xaabbccdd;

;; --------------------------------------------
;; Escrow State Enum
;; --------------------------------------------
const int STATE_IDLE = 0;
const int STATE_TASK_SET_AND_FUNDS_PENDING = 1;
const int STATE_ACTIVE = 2;
const int STATE_PENDING_VERIFICATION = 3;
const int STATE_SETTLED = 4;
const int STATE_DISPUTED = 5;
const int STATE_EXPIRED = 6;
const int STATE_REFUNDED = 7;

;; ============================================
;; Storage
;; ============================================
;; [ziver_treasury_address, tasks_dict, accumulated_ziver_fees]
;; Task Storage in tasks_dict:
;; [Poster, Payment, N, PerfCompleted, PerfCount, DescHash, GoalHash, Expiry, Funds, Fee%, Mod, State, ProofMap, LastQueryId]

(slice, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    slice ziver_treasury_address = ds~load_msg_addr();
    cell tasks_dict = ds~load_dict();
    int accumulated_ziver_fees = ds~load_coins();
    return (ziver_treasury_address, tasks_dict, accumulated_ziver_fees);
}

() save_data(slice ziver_treasury_address, cell tasks_dict, int accumulated_ziver_fees) impure inline {
    set_data(
        begin_cell()
            .store_slice(ziver_treasury_address)
            .store_dict(tasks_dict)
            .store_coins(accumulated_ziver_fees)
        .end_cell()
    );
}

;; ============================================
;; Event Logging (codes for hackathon demo)
;; ============================================
() log_event(int event_code, int task_id, int extra) impure {
    ;; event_code: 1=created, 2=completed, 3=expired, 4=disputed, 5=resolved, 6=fees_withdrawn, 7=cancelled
    ;; For now, this is a placeholder. A real implementation might use external messages.
}

;; ============================================
;; Getters (off-chain, view methods)
;; ============================================
slice get_ziver_treasury_address() method_id {
    (slice ziver_treasury_address, cell _, int _) = load_data();
    return ziver_treasury_address;
}

int get_accumulated_fees() method_id {
    (_, _, int accumulated_ziver_fees) = load_data();
    return accumulated_ziver_fees;
}

tuple get_task_details(int task_id) method_id {
    (_, cell tasks_dict, _) = load_data();
    (cell c, int found) = udict_get_ref?(tasks_dict, 64, task_id);
    if (~ found) {
        return null();
    }
    slice s = c.begin_parse();
    return s;
}

;; ============================================
;; Internal Message Handler (all logic here)
;; ============================================
() recv_internal() impure {
    slice in_msg = in_msg_body();
    int op = in_msg~load_uint(32);
    int query_id = in_msg~load_uint(64);

    slice sender_address = sender();
    int msg_value = in_msg_value();

    (slice ziver_treasury_address, cell tasks_dict, int accumulated_ziver_fees) = load_data();

    ;; ============================================
    ;; 1. Task Creation: Poster creates a new task
    ;; ============================================
    if (op == op_send_task_details) {
        int task_id = in_msg~load_uint(64);
        int payment_per_performer_amount = in_msg~load_coins();
        int number_of_performers_needed = in_msg~load_uint(32);
        int task_description_hash = in_msg~load_uint(256);
        int task_goal_hash = in_msg~load_uint(256);
        int expiry_timestamp = in_msg~load_uint(64);
        int ziver_fee_percentage = in_msg~load_uint(8);
        slice moderator_address = in_msg~load_msg_addr();

        (cell _, int found) = udict_get_ref?(tasks_dict, 64, task_id);
        throw_if(error_task_already_exists, found);

        builder c = begin_cell()
            .store_slice(sender_address)
            .store_coins(payment_per_performer_amount)
            .store_uint(number_of_performers_needed, 32)
            .store_dict(new_dict())
            .store_uint(0, 32)
            .store_uint(task_description_hash, 256)
            .store_uint(task_goal_hash, 256)
            .store_uint(expiry_timestamp, 64)
            .store_coins(0)
            .store_uint(ziver_fee_percentage, 8)
            .store_slice(moderator_address)
            .store_uint(STATE_IDLE, 8)
            .store_dict(new_dict())
            .store_uint(query_id, 64);

        tasks_dict~udict_set_ref(64, task_id, c.end_cell());
        save_data(ziver_treasury_address, tasks_dict, accumulated_ziver_fees);
        log_event(1, task_id, 0);
    }
    ;; ============================================
    ;; 2. Deposit Funds: Poster funds task escrow
    ;; ============================================
    elseif (op == op_deposit_funds) {
        int task_id = in_msg~load_uint(64);
        (cell c, int found) = udict_get_ref?(tasks_dict, 64, task_id);
        throw_if(error_task_not_found, ~ found);
        slice s = c.begin_parse();

        slice task_poster_address = s~load_msg_addr();
        int payment_per_performer_amount = s~load_coins();
        int number_of_performers_needed = s~load_uint(32);
        cell performers_completed = s~load_dict();
        int completed_performers_count = s~load_uint(32);
        s~skip_bits(512); ;; skip hashes
        int expiry_timestamp = s~load_uint(64);
        int current_total_escrowed_funds = s~load_coins();
        s~skip_bits(8); ;; skip fee
        s~skip_bits(267); ;; skip mod address
        int current_state = s~load_uint(8);
        int last_query_id = s~load_uint(64);

        throw_if(error_task_expired, now() > expiry_timestamp);
        throw_if(error_not_task_poster, ~ slice_equal(sender_address, task_poster_address));
        throw_if(error_invalid_state, (current_state != STATE_IDLE) & (current_state != STATE_TASK_SET_AND_FUNDS_PENDING));
        throw_if(error_replay, query_id == last_query_id);

        int expected_total_funds = payment_per_performer_amount * number_of_performers_needed;
        int required_amount = expected_total_funds - current_total_escrowed_funds;
        throw_if(error_insufficient_funds, msg_value < required_amount);

        current_total_escrowed_funds += msg_value;
        int new_state = (current_total_escrowed_funds >= expected_total_funds) ? STATE_ACTIVE : STATE_TASK_SET_AND_FUNDS_PENDING;
        
        s~force_restore();
        builder b = begin_cell().store_slice(s);
        b~store_coins(current_total_escrowed_funds);
        b~skip_bits(8 + 267);
        b~store_uint(new_state, 8);
        b~skip_bits(256);
        b~store_uint(query_id, 64);
        
        tasks_dict~udict_set_ref(64, task_id, b.end_cell());
        save_data(ziver_treasury_address, tasks_dict, accumulated_ziver_fees);

        if (msg_value > required_amount) {
            send_raw_message(begin_cell().store_uint(0x10, 6).store_slice(sender_address).store_coins(msg_value - required_amount).store_uint(0, 1).end_cell(), 1);
        }
    }
    ;; ============================================
    ;; 3. Auto-Expire Task
    ;; ============================================
    elseif (op == op_expire_task) {
        int task_id = in_msg~load_uint(64);
        (cell c, int found) = udict_get_ref?(tasks_dict, 64, task_id);
        throw_if(error_task_not_found, ~ found);
        slice s = c.begin_parse();
        slice task_poster_address = s~load_msg_addr();
        s~skip_bits(32+32+256+32);
        int expiry_timestamp = s~load_uint(64);
        int current_total_escrowed_funds = s~load_coins();
        s~skip_bits(8+267);
        int current_state = s~load_uint(8);
        
        throw_if(error_invalid_state, (current_state == STATE_SETTLED) | (current_state == STATE_EXPIRED) | (current_state == STATE_REFUNDED));
        throw_if(error_task_expired, now() < expiry_timestamp);

        if (current_total_escrowed_funds > 0) {
            send_raw_message(begin_cell().store_uint(0x18, 6).store_slice(task_poster_address).store_coins(current_total_escrowed_funds).store_uint(0, 1).end_cell(), 64);
            current_total_escrowed_funds = 0;
        }
        
        s~force_restore();
        builder b = begin_cell().store_slice(s);
        b~skip_bits(32+32+256+32+64);
        b~store_coins(current_total_escrowed_funds);
        b~skip_bits(8+267);
        b~store_uint(STATE_EXPIRED, 8);
        b~skip_bits(256);
        b~store_uint(query_id, 64);
        
        tasks_dict~udict_set_ref(64, task_id, b.end_cell());
        save_data(ziver_treasury_address, tasks_dict, accumulated_ziver_fees);
        log_event(3, task_id, 0);
    }
    ;; ... other op handlers ...
    ;; ============================================
    ;; 9. Withdraw Protocol Fees: Only treasury can withdraw
    ;; ============================================
    elseif (op == op_withdraw_fee) {
        throw_if(error_not_owner, ~ slice_equal(sender_address, ziver_treasury_address));
        throw_if(error_no_accumulated_fees, accumulated_ziver_fees <= 0);

        send_raw_message(begin_cell().store_uint(0x18, 6).store_slice(ziver_treasury_address).store_coins(accumulated_ziver_fees).store_uint(0, 1).end_cell(), 64);
        
        accumulated_ziver_fees = 0;
        save_data(ziver_treasury_address, tasks_dict, accumulated_ziver_fees);
        log_event(6, 0, 0);
    }
    ;; ============================================
    ;; 10. Unknown Opcode
    ;; ============================================
    else {
        throw(error_unknown_opcode);
    }
}
