;; ============================================
;; Ziver Escrow Smart Contract (escrow_s_m.fc)
;; Final Corrected Version
;; ============================================

#include "imports/stdlib.fc";

;; Helper function to compare two slices
int slice_equal? (slice a, slice b) asm "SDEQ";

;; --------------------------------------------
;; Error Codes
;; --------------------------------------------
const int error_not_owner = 100;
const int error_task_already_exists = 101;
const int error_task_not_found = 102;
const int error_not_task_poster = 103;
const int error_invalid_state = 104;
const int error_insufficient_funds = 105;
const int error_already_completed_performer = 118;
const int error_task_not_in_disputed_state = 112;
const int error_not_moderator = 113;
const int error_no_accumulated_fees = 114;
const int error_task_expired = 256;
const int error_replay = 257;
const int error_unknown_opcode = 255;


;; --------------------------------------------
;; Opcodes
;; --------------------------------------------
const int op_send_task_details = 0x1a2b3c4d;
const int op_deposit_funds = 0x5e6f7a8b;
const int op_verify_task_completion = 0x9c0d1e2f;
const int op_submit_proof = 0x3a4b5c6d;
const int op_raise_dispute = 0x7e8f9a0b;
const int op_resolve_dispute = 0x11223344;
const int op_cancel_task_and_refund = 0x99aabbcc;
const int op_withdraw_fee = 0xddccbbaa;
const int op_expire_task = 0xaabbccdd;

;; --------------------------------------------
;; Escrow State Enum
;; --------------------------------------------
const int STATE_TASK_SET_AND_FUNDS_PENDING = 1;
const int STATE_ACTIVE = 2;
const int STATE_PENDING_VERIFICATION = 3;
const int STATE_SETTLED = 4;
const int STATE_DISPUTED = 5;
const int STATE_EXPIRED = 6;
const int STATE_REFUNDED = 7;

;; ============================================
;; Storage
;; ============================================
(slice, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    slice ziver_treasury_address = ds~load_msg_addr();
    cell tasks_dict = ds~load_dict();
    int accumulated_ziver_fees = ds~load_coins();
    return (ziver_treasury_address, tasks_dict, accumulated_ziver_fees);
}

() save_data(slice ziver_treasury_address, cell tasks_dict, int accumulated_ziver_fees) impure inline {
    set_data(
        begin_cell()
            .store_slice(ziver_treasury_address)
            .store_dict(tasks_dict)
            .store_coins(accumulated_ziver_fees)
        .end_cell()
    );
}

;; ============================================
;; Getters (off-chain, view methods)
;; ============================================
slice get_ziver_treasury_address() method_id {
    var (ziver_treasury_address, _, _) = load_data();
    return ziver_treasury_address;
}

int get_accumulated_fees() method_id {
    var (_, _, accumulated_ziver_fees) = load_data();
    return accumulated_ziver_fees;
}

(slice, int, int, cell, int, int, int, int, int, int, slice, int, cell, int) get_task_details(int task_id) method_id {
    (_, cell tasks_dict, _) = load_data();
    (cell c, int found) = udict_get_ref?(tasks_dict, 64, task_id);

    if (~ found) {
        return (null(), 0, 0, null(), 0, 0, 0, 0, 0, 0, null(), 0, null(), 0);
    }

    slice s = c.begin_parse();
    return (s~load_msg_addr(), s~load_coins(), s~load_uint(32), s~load_dict(), s~load_uint(32), s~load_uint(256), s~load_uint(256), s~load_uint(64), s~load_coins(), s~load_uint(8), s~load_msg_addr(), s~load_uint(8), s~load_dict(), s~load_uint(64));
}

;; ============================================
;; Internal Message Handler
;; ============================================
() recv_internal(int my_balance, int msg_value, cell in_msg_full_cell, slice in_msg_full) impure {
    if (in_msg_full.slice_empty?()) {
        return ();
    }

    int flags = in_msg_full~load_uint(4);
    slice sender_address = in_msg_full~load_msg_addr();

    cell msg_body_cell = in_msg_full~load_ref();
    slice in_msg_slice = msg_body_cell.begin_parse();

    int op = in_msg_slice~load_uint(32);
    int query_id = in_msg_slice~load_uint(64);

    (slice ziver_treasury_address, cell tasks_dict, int accumulated_ziver_fees) = load_data();

    if (op == op_send_task_details) {
        cell details_cell = in_msg_slice~load_ref();
        slice details = details_cell.begin_parse();
        int task_id = details~load_uint(64);

        (cell task_cell, int found) = udict_get_ref?(tasks_dict, 64, task_id);
        throw_if(error_task_already_exists, found);

        builder c = begin_cell()
            .store_slice(sender_address)
            .store_coins(details~load_coins())
            .store_uint(details~load_uint(32), 32)
            .store_dict(new_dict())
            .store_uint(0, 32)
            .store_uint(details~load_uint(256), 256)
            .store_uint(details~load_uint(256), 256)
            .store_uint(details~load_uint(64), 64)
            .store_coins(0)
            .store_uint(details~load_uint(8), 8)
            .store_slice(details~load_msg_addr())
            .store_uint(STATE_TASK_SET_AND_FUNDS_PENDING, 8)
            .store_dict(new_dict())
            .store_uint(query_id, 64);

        ;; FIX: Use explicit assignment for dictionary updates to ensure state is saved.
        tasks_dict = udict_set_ref(tasks_dict, 64, task_id, c.end_cell());
        save_data(ziver_treasury_address, tasks_dict, accumulated_ziver_fees);
        return ();

    } elseif (op == op_withdraw_fee) {
        throw_if(error_not_owner, ~ slice_equal?(sender_address, ziver_treasury_address));
        throw_if(error_no_accumulated_fees, accumulated_ziver_fees == 0);

        int amount_to_withdraw = accumulated_ziver_fees;
        accumulated_ziver_fees = 0;
        save_data(ziver_treasury_address, tasks_dict, accumulated_ziver_fees);

        cell withdraw_msg = begin_cell().store_uint(0x18, 6).store_slice(ziver_treasury_address).store_coins(amount_to_withdraw).store_uint(0, 1).end_cell();
        send_raw_message(withdraw_msg, 1);
        return ();
    }

    ;; All other operations are task-specific
    int task_id = in_msg_slice~load_uint(64);
    (cell c, int found) = udict_get_ref?(tasks_dict, 64, task_id);
    throw_if(error_task_not_found, ~ found);

    slice s = c.begin_parse();
    slice task_poster_address = s~load_msg_addr();
    int payment_per_performer_amount = s~load_coins();
    int number_of_performers_needed = s~load_uint(32);
    cell performers_completed = s~load_dict();
    int completed_performers_count = s~load_uint(32);
    int task_description_hash = s~load_uint(256);
    int task_goal_hash = s~load_uint(256);
    int expiry_timestamp = s~load_uint(64);
    int current_total_escrowed_funds = s~load_coins();
    int ziver_fee_percentage = s~load_uint(8);
    slice moderator_address = s~load_msg_addr();
    int current_state = s~load_uint(8);
    cell proof_submission_map = s~load_dict();
    int last_query_id = s~load_uint(64);

    throw_if(error_replay, query_id == last_query_id);

    if (op == op_deposit_funds) {
        throw_if(error_not_task_poster, ~ slice_equal?(sender_address, task_poster_address));
        throw_if(error_invalid_state, current_state != STATE_TASK_SET_AND_FUNDS_PENDING);

        int expected_total_funds = payment_per_performer_amount * number_of_performers_needed;
        int new_total_funds = current_total_escrowed_funds + msg_value;
        
        ;; FIX: Correct logic to handle partial deposits and overpayment refunds.
        if (new_total_funds >= expected_total_funds) {
            current_state = STATE_ACTIVE;
            current_total_escrowed_funds = expected_total_funds;
            int overpayment = new_total_funds - expected_total_funds;
            if (overpayment > 0) {
                cell overpay_msg = begin_cell().store_uint(0x10, 6).store_slice(sender_address).store_coins(overpayment).store_uint(0, 1).end_cell();
                send_raw_message(overpay_msg, 1);
            }
        } else {
            current_total_escrowed_funds = new_total_funds;
        }

    } elseif (op == op_expire_task) {
        throw_if(error_task_expired, now() < expiry_timestamp);
        if (current_total_escrowed_funds > 0) {
            cell refund_msg = begin_cell().store_uint(0x18, 6).store_slice(task_poster_address).store_coins(current_total_escrowed_funds).store_uint(0, 1).end_cell();
            send_raw_message(refund_msg, 1); 
            current_total_escrowed_funds = 0;
        }
        current_state = STATE_EXPIRED;

    } elseif (op == op_verify_task_completion) {
        slice performer_address = in_msg_slice~load_msg_addr();
        throw_if(error_not_task_poster, ~ slice_equal?(sender_address, task_poster_address));
        throw_if(error_invalid_state, (current_state != STATE_ACTIVE) & (current_state != STATE_PENDING_VERIFICATION));
        
        (cell dummy_cell, int is_completed) = udict_get_ref?(performers_completed, 256, slice_hash(performer_address));
        throw_if(error_already_completed_performer, is_completed);

        ;; FIX: Use explicit assignment for the nested dictionary update.
        performers_completed = udict_set_ref(performers_completed, 256, slice_hash(performer_address), begin_cell().end_cell());
        completed_performers_count += 1;

        int fee_amount = (payment_per_performer_amount * ziver_fee_percentage) / 100;
        current_total_escrowed_funds -= payment_per_performer_amount;
        accumulated_ziver_fees += fee_amount;

        ;; FIX: Use a clear if/else block for state transition.
        if (completed_performers_count >= number_of_performers_needed) {
            current_state = STATE_SETTLED;
        } else {
            current_state = STATE_PENDING_VERIFICATION;
        }

        cell performer_msg = begin_cell().store_uint(0x18, 6).store_slice(performer_address).store_coins(payment_per_performer_amount - fee_amount).store_uint(0, 1).end_cell();
        send_raw_message(performer_msg, 1);

    } elseif (op == op_cancel_task_and_refund) {
        throw_if(error_not_task_poster, ~ slice_equal?(sender_address, task_poster_address));
        throw_if(error_invalid_state, current_state != STATE_TASK_SET_AND_FUNDS_PENDING);
        if (current_total_escrowed_funds > 0) {
            cell refund_msg = begin_cell().store_uint(0x18, 6).store_slice(task_poster_address).store_coins(current_total_escrowed_funds).store_uint(0, 1).end_cell();
            send_raw_message(refund_msg, 1);
            current_total_escrowed_funds = 0;
        }
        current_state = STATE_REFUNDED;

    } elseif (op == op_resolve_dispute) {
        slice winner_address = in_msg_slice~load_msg_addr();
        throw_if(error_not_moderator, ~ slice_equal?(sender_address, moderator_address));
        throw_if(error_task_not_in_disputed_state, current_state != STATE_DISPUTED);

        if (slice_equal?(winner_address, task_poster_address)) {
            cell refund_msg = begin_cell().store_uint(0x18, 6).store_slice(task_poster_address).store_coins(current_total_escrowed_funds).store_uint(0, 1).end_cell();
            send_raw_message(refund_msg, 1);
            current_total_escrowed_funds = 0;
        } else {
            int fee_amount = (payment_per_performer_amount * ziver_fee_percentage) / 100;
            current_total_escrowed_funds -= payment_per_performer_amount;
            accumulated_ziver_fees += fee_amount;
            cell winner_msg = begin_cell().store_uint(0x18, 6).store_slice(winner_address).store_coins(payment_per_performer_amount - fee_amount).store_uint(0, 1).end_cell();
            send_raw_message(winner_msg, 1);
        }
        current_state = STATE_SETTLED;

    } elseif (op == op_raise_dispute) {
        throw_if(error_invalid_state, (current_state != STATE_ACTIVE) & (current_state != STATE_PENDING_VERIFICATION));
        current_state = STATE_DISPUTED;

    } elseif (op == op_submit_proof) {
         ;; Not fully implemented in this version, but op code exists
         ;; For now, this op does nothing to the state besides updating query_id

    } else {
        throw(error_unknown_opcode);
    }

    ;; Rebuild the task cell with all modified local variables.
    builder b = begin_cell()
        .store_slice(task_poster_address)
        .store_coins(payment_per_performer_amount)
        .store_uint(number_of_performers_needed, 32)
        .store_dict(performers_completed)
        .store_uint(completed_performers_count, 32)
        .store_uint(task_description_hash, 256)
        .store_uint(task_goal_hash, 256)
        .store_uint(expiry_timestamp, 64)
        .store_coins(current_total_escrowed_funds)
        .store_uint(ziver_fee_percentage, 8)
        .store_slice(moderator_address)
        .store_uint(current_state, 8)
        .store_dict(proof_submission_map)
        .store_uint(query_id, 64);

    ;; FIX: Use explicit assignment to update the main tasks dictionary.
    tasks_dict = udict_set_ref(tasks_dict, 64, task_id, b.end_cell());
    save_data(ziver_treasury_address, tasks_dict, accumulated_ziver_fees);
}
