"""
Pydantic schemas for Sponsored Tasks.
"""
from datetime import datetime
from enum import Enum

from pydantic import BaseModel, Field

# =================================================================
#                 --- Supporting Enum ---
# =================================================================

class DurationOption(str, Enum):
    """Defines the valid duration options for a sponsored task."""
    one_day = "1_day"
    five_days = "5_days"
    fifteen_days = "15_days"

# =================================================================
#                 --- Base Schema ---
# =================================================================

class SponsoredTaskBase(BaseModel):
    """Base schema with common attributes for sponsored tasks."""
    title: str = Field(..., min_length=3, max_length=100, description="The title of the task.")
    description: str = Field(..., min_length=10, max_length=500, description="A detailed description of the task requirements.")
    zp_reward: int = Field(..., gt=0, description="The ZP reward for each user who completes the task.")
    external_link: str = Field(..., description="Link to the social media post, website, etc.")
    duration: DurationOption = Field(..., description="How long the task will be active.")
    verification_criteria: str = Field(..., min_length=10, max_length=500, description="How task completion will be verified.")

# =================================================================
#         --- Schema for Creating a New Sponsored Task ---
# =================================================================

class SponsoredTaskCreate(SponsoredTaskBase):
    """Schema used when a user creates a new sponsored task."""
    # This schema inherits all fields from SponsoredTaskBase, so no new fields are needed here.
    pass

# =================================================================
#        --- Schema for Responding with Task Details ---
# =================================================================

class SponsoredTaskResponse(SponsoredTaskBase):
    """
    Schema for the data sent back to the client after a task is created.
    This includes fields that are generated by the server.
    """
    id: int
    owner_id: int
    is_active: bool
    created_at: datetime

    class Config:
        # This allows Pydantic to read data from ORM models (like SQLAlchemy)
        from_attributes = True

