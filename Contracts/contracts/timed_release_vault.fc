;; contracts/main.fc
;; TimedReleaseVault Smart Contract

;; --- Standard Library Includes ---
;; This line is CRUCIAL. It brings in most common FunC functions, types, and macros.
#include "imports/stdlib.fc";
;; Usually, op-codes are defined in a separate file, or in std.fc for common ones.
;; If Blueprint generated an 'op-codes.fc' in your 'contracts/' folder, make sure it's there.
;; If not, we define them here. Let's assume you might have one, or define them locally for now.
#include "imports/op-codes.fc"; ;; Assumes Blueprint's template includes this. If not, remove and define consts locally.

;; --- Storage Layout ---
;; Contract data will store:
;; 1. owner_address: MsgAddress - The address allowed to release funds.
;; 2. release_timestamp: int - Unix timestamp when funds can be released.
;; 3. is_released: int - Flag (0 or 1) to indicate if funds have been released.

;; --- Helper Functions ---

;; parse_data() decodes the contract's data cell
;; Returns (owner_address_slice, release_timestamp, is_released)
(slice, int, int) parse_data() inline {
    slice ds = get_data(); ;; CORRECTED: Use get_data() instead of get_c4()
    throw_if(101, ds.slice_empty?()); ;; Ensure data exists
    var owner_address = ds~load_msg_addr();
    var release_timestamp = ds~load_uint(64);
    var is_released = ds~load_int(1); ;; 1 bit for boolean
    return (owner_address, release_timestamp, is_released);
}

;; store_data() encodes the contract's data into a cell
cell store_data(slice owner_address, int release_timestamp, int is_released) inline {
    return begin_cell()
        .store_slice(owner_address)
        .store_uint(release_timestamp, 64)
        .store_int(is_released, 1)
        .end_cell();
}

;; --- Internal Message Handler ---
(int) recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg) impure {
    slice cs = in_msg; ;; Message body slice

    ;; Parse the full incoming message to extract header information
    slice in_msg_full_slice = in_msg_full.begin_parse(); ;; Convert full message cell to slice
    in_msg_full_slice~load_uint(1); ;; Skip int_msg_info$0 tag (1 bit)
    in_msg_full_slice~load_bool(); ;; Skip ihr_disabled (1 bit)
    in_msg_full_slice~load_bool(); ;; Skip bounce (1 bit)
    in_msg_full_slice~load_bool(); ;; Skip bounced (1 bit)
    slice sender_address = in_msg_full_slice~load_msg_addr(); ;; Load source address

    ;; Load current contract data. If data is empty, this is the first deployment/initialization.
    var (owner_address, release_timestamp, is_released) = null(); ;; Initialize with null values

    if (get_data().slice_empty?()) { ;; CORRECTED: Use get_data() instead of get_c4()
        ;; Initial deployment / First message to an uninitialized contract
        ;; For this MVP, we'll assume the deployer is the owner and this message sets the initial state.
        ;; In a real app, you'd send an explicit 'init' message after deployment.

        ;; Expecting the first message body to contain:
        ;; uint32 opcode (e.g., 0x1)
        ;; uint64 release_timestamp
        ;; This assumes the *deployer* is setting the owner and release time.
        throw_unless(102, cs.slice_bits() >= (32 + 64)); ;; Ensure enough bits for opcode and timestamp

        int op = cs~load_uint(32);
        throw_unless(103, op == 1); ;; Simple init opcode = 1 for first message

        release_timestamp = cs~load_uint(64);
        owner_address = sender_address; ;; Deployer becomes the owner
        is_released = 0; ;; Not yet released

        set_data(store_data(owner_address, release_timestamp, is_released)); ;; CORRECTED: Use set_data() instead of set_c4()
        return 0;
    } else {
        ;; Contract is already initialized, load existing data
        (owner_address, release_timestamp, is_released) = parse_data();
    }

    ;; Handle other messages by opcode
    int op = cs~load_uint(32);

    ;; Handle deposit message (any sender can deposit by sending value without specific opcode, or with op::deposit)
    if (op == op::deposit) {
        ;; Funds are automatically added to my_balance
        ;; No specific logic needed here other than just accepting the message.
        ;; Contract simply holds the balance.
        return 0;
    }

    ;; Handle release message
    if (op == op::release) {
        throw_unless(77, equal_slices_bits(sender_address, owner_address)); ;; CORRECTED: Use equal_slices_bits()
        throw_unless(78, is_released == 0); ;; Funds not yet released
        throw_unless(79, now() >= release_timestamp); ;; Time must have passed (now() is current block timestamp)

        ;; Send all contract balance back to owner, excluding minimal fees
        ;; mode 128 (0x80): tells it to send remaining value after fees.
        ;; 0x18 - int_msg_info$100000 destination address (dest_addr), this is a common form for outgoing messages
        send_raw_message(
            begin_cell()
                .store_uint(0x18, 6) ;; int_msg_info$100000
                .store_slice(owner_address) ;; destination address
                .store_coins(0) ;; send 0 coins here, mode 128 will send all
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; common fields for outgoing message (e.g., bounce, flags, etc.)
                .end_cell(),
            128 + 2 ;; mode 128: send all remaining balance, +2: ignore body, +0: don't bounce if fails
        );

        ;; Update contract data to mark as released
        set_data(store_data(owner_address, release_timestamp, 1)); ;; CORRECTED: Use set_data()
        return 0;
    }

    ;; If we reach here, it's an unhandled opcode.
    throw(0xffff); ;; Throw generic error for unhandled opcode
    return 0;
}

;; --- Get Methods (Public read-only functions) ---

;; get_owner(): Returns the owner address
(slice) get_owner() method_id {
    var (owner_address, _, _) = parse_data();
    return owner_address;
}

;; get_release_timestamp(): Returns the release timestamp
(int) get_release_timestamp() method_id {
    var (_, release_timestamp, _) = parse_data();
    return release_timestamp;
}

;; get_is_released(): Returns the released flag
(int) get_is_released() method_id {
    var (_, _, is_released) = parse_data();
    return is_released;
}
